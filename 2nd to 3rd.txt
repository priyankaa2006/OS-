FINDING ODD OR EVEN NUMBER

PROGRAM:
echo "enter the value of n:"
read n
r=`expr $n % 2`
if test $r -eq 0
then
echo "even number"
else
echo "odd number"
fi


ARITHEMATIC OPERATION USING SWITCH CASE

echo "enter the value of a"
read a
echo "enter the value of b"
read b
c=`expr $a + $b`
echo "sum:" $c
c=`expr $a - $b`
echo "sub:" $c
c=`expr $a \* $b`
echo "mul:" $c
c=`expr $a / $b`
echo "div:" $c
EXECUTING SHELL COMMANDS USING SWITCH CASE
while test $ch='y'
do
echo enter the choice:
echo 1.number of user logged in:
echo 2.print calendar:
echo 3.print date:
echo 4.break:
read d
case $d in
1) who i am;;
2) cal 20;;
3) date;;
4) break;;
esac
echo " continue (y)"
read ch
done


GENERATING MULTIPLICATION TABLE

echo "which table you want"
read n
for ((i=1;i<10;i++))
do
x=`expr $i \* $n`
echo $i "*" $n "=" $x
done


PALINDROME

echo "enter the string"
read s
n=`expr $s | wc -c`
a=''
while test $n -gt 0
do
x=`expr $s | cut -c $n`
a=`echo $a$x`
n=`expr $n-1 | bc`
done
echo "the reversed string is" $a
if test "$s" = "$a"
then
echo "the given string is palindrome"
else
echo "the given string is not palindrome"
fi


FIBONACCI SERIES
echo "enter the limit"
read i
n=2
x=0
y=1
echo "fibonacci series"
echo $x
echo $y
while test $n -lt $i
do
z=`expr $x+$y|bc`
echo $z
x=$y
y=$z
n=`expr $n+1|bc`
done


CHECK FOR PRIME NUMBER
echo "enter the value of n"
read n
flag=0
for ((i=2;i<n/2;i++))
do
r=`expr $n%$i|bc`
if test $r -eq 0
then flag=1
break
fi
done
if test $flag -eq 0
then
echo "$n is a prime number"
else
echo "$n is not a prime number"
fi


PROCESS MANAGEMENT USING SYSTEM CALLS :
 FORK, EXIT, GETPID, WAIT, CLOSE

#include<stdio.h>
#include<unistd.h>
main() { int pid,pid1,pid2; pid=fork();
if(pid==-1)
{
printf(“ERROR IN PROCESS CREATION \n”);
exit(1);
}
if(pid!=0)
{
pid1=getpid();
printf(“\n the parent process ID is %d\n”, pid1);
}
else { pid2=getpid();
printf(“\n the child process ID is %d\n”, pid2);
}
}
