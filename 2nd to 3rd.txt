# Finding Odd or Even Number

echo "Enter the value of n:"
read n
r=$((n % 2))
if [ $r -eq 0 ]
then
    echo "Even number"
else
    echo "Odd number"
fi

# Arithmetic Operations Using Switch Case
echo "Enter the value of a:"
read a
echo "Enter the value of b:"
read b
echo "Enter operation: +, -, *, /"
read op
case $op in
    +) echo "Sum: $((a + b))" ;;
    -) echo "Subtraction: $((a - b))" ;;
    \*) echo "Multiplication: $((a * b))" ;;
    /) echo "Division: $((a / b))" ;;
    *) echo "Invalid operation" ;;
esac

# Executing Shell Commands Using Switch Case
ch='y'
while [ "$ch" = 'y' ]
do
    echo "Enter the choice:"
    echo "1. Number of users logged in"
    echo "2. Print calendar"
    echo "3. Print date"
    echo "4. Exit"
    read d
    case $d in
        1) who ;; 
        2) cal ;; 
        3) date ;; 
        4) break ;;
        *) echo "Invalid choice" ;;
    esac
    echo "Continue? (y/n)"
    read ch
done

# Generating Multiplication Table
echo "Which table do you want?"
read n
for ((i=1; i<=10; i++))
do
    echo "$i * $n = $((i * n))"
done

# Palindrome Check
echo "Enter the string:"
read s
rev=$(echo "$s" | rev)
if [ "$s" = "$rev" ]
then
    echo "The given string is a palindrome"
else
    echo "The given string is not a palindrome"
fi

# Fibonacci Series
echo "Enter the limit:"
read i
x=0
y=1
n=2
echo "Fibonacci series:"
echo $x
echo $y
while [ $n -lt $i ]
do
    z=$((x + y))
    echo $z
    x=$y
    y=$z
    n=$((n + 1))
done

# Check for Prime Number
echo "Enter the value of n:"
read n
flag=0
for ((i=2; i<=n/2; i++))
do
    if [ $((n % i)) -eq 0 ]
    then
        flag=1
        break
    fi
done
if [ $flag -eq 0 ]
then
    echo "$n is a prime number"
else
    echo "$n is not a prime number"
fi

# Process Management Using System Calls (C Program)
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

int main() {
    int pid, pid1, pid2;
    pid = fork();
    if (pid == -1) {
        printf("ERROR IN PROCESS CREATION\n");
        exit(1);
    }
    if (pid != 0) {
        pid1 = getpid();
        printf("\nThe parent process ID is %d\n", pid1);
    } else {
        pid2 = getpid();
        printf("\nThe child process ID is %d\n", pid2);
    }
    return 0;
}
